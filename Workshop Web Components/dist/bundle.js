(()=>{"use strict";var __webpack_modules__={361:()=>{eval('\n;// CONCATENATED MODULE: ./src/views/about.ts\nconst aboutPage = `<div>Hello, from about page!</div>`;\n\n;// CONCATENATED MODULE: ./src/views/contact.ts\nconst contactPage = `<div>Hello, from contact page!</div>`;\n\n;// CONCATENATED MODULE: ./src/views/home.ts\nconst homePage = `<div>Hello, from home page!</div>`;\n\n;// CONCATENATED MODULE: ./src/views/posts.ts\nconst postsPage = ``;\n\n;// CONCATENATED MODULE: ./src/views/users.ts\nlet usersTemplate = `\r\n<h1>Users Page</h1>`;\n// let usersService = new UserService();\n// usersService.getAll().then(data => data.forEach((element: User) => {\n//    usersTemplate += `\\n<p>${element.name}</p> <p>${element.email}</p> <p>${element.phone}</p>`;\n//    console.log("\\n", usersTemplate);\n// }));\n// console.log(usersTemplate);\nconst usersPage = usersTemplate;\n\n;// CONCATENATED MODULE: ./src/router.ts\n\n\n\n\n\nconst router = {\n    "/": homePage,\n    "/about": aboutPage,\n    "/contact": contactPage,\n    "/posts": postsPage,\n    "/users": usersPage\n};\n\n;// CONCATENATED MODULE: ./src/services/postService.ts\nclass PostService {\n    constructor() {\n        this.apiUrl = "https://jsonplaceholder.typicode.com/posts";\n    }\n    createPost(body) {\n        fetch(this.apiUrl, { method: "POST", headers: { "Content-type": "application/json; charset=UTF-8" }, body: JSON.stringify(body) })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    getAll() {\n        fetch(this.apiUrl)\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    getOne(id) {\n        fetch(`${this.apiUrl}/${id}`)\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    update(body) {\n        fetch(`${this.apiUrl}/${body.id}`, { method: "PUT", headers: { "Content-type": "application/json; charset=UTF-8" }, body: JSON.stringify(body) })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    delete(id) {\n        fetch(`${this.apiUrl}/${id}`, { method: "DELETE" })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/services/userService.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass UserService {\n    constructor() {\n        this.apiUrl = "https://jsonplaceholder.typicode.com/users";\n    }\n    createUser(body) {\n        fetch(this.apiUrl, { method: "POST", headers: { "Content-type": "application/json; charset=UTF-8" }, body: JSON.stringify(body) })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    getAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield fetch(this.apiUrl);\n                const data = yield response.json();\n                return data;\n            }\n            catch (err) {\n                console.log(err);\n                throw err; // Re-throw the error if you want to handle it further up the chain\n            }\n        });\n    }\n    getOne(id) {\n        fetch(`${this.apiUrl}/${id}`)\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    update(body) {\n        fetch(`${this.apiUrl}/${body.id}`, { method: "PUT", headers: { "Content-type": "application/json; charset=UTF-8" }, body: JSON.stringify(body) })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n    delete(userId) {\n        fetch(`${this.apiUrl}/${userId}`, { method: "DELETE" })\n            .then(res => res.json())\n            .then((data) => console.log(data))\n            .catch(err => console.log(err));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/utils/htmlUtil.ts\nclass HtmlUtil {\n    static render(rootDiv, router) {\n        if (!rootDiv) {\n            throw Error("Missing root element!");\n        }\n        rootDiv.innerHTML = router[window.location.pathname];\n        HtmlUtil.allEventListeners(rootDiv, router);\n    }\n    static allEventListeners(rootDiv, router) {\n        const homeAnchor = document.getElementById("home");\n        const aboutAnchor = document.getElementById("about");\n        const contactAnchor = document.getElementById("contact");\n        const postsAnchor = document.getElementById("posts");\n        const usersAnchor = document.getElementById("users");\n        homeAnchor === null || homeAnchor === void 0 ? void 0 : homeAnchor.addEventListener("click", () => HtmlUtil.onNavigate(rootDiv, router, "/"));\n        aboutAnchor === null || aboutAnchor === void 0 ? void 0 : aboutAnchor.addEventListener("click", () => HtmlUtil.onNavigate(rootDiv, router, "/about"));\n        contactAnchor === null || contactAnchor === void 0 ? void 0 : contactAnchor.addEventListener("click", () => HtmlUtil.onNavigate(rootDiv, router, "/contact"));\n        postsAnchor === null || postsAnchor === void 0 ? void 0 : postsAnchor.addEventListener("click", () => HtmlUtil.onNavigate(rootDiv, router, \'/posts\'));\n        usersAnchor === null || usersAnchor === void 0 ? void 0 : usersAnchor.addEventListener("click", () => HtmlUtil.onNavigate(rootDiv, router, "/users"));\n    }\n    static onNavigate(rootDiv, router, pathname) {\n        const { origin } = window.location;\n        window.history.pushState({}, pathname, `${origin}${pathname}`);\n        if (rootDiv) {\n            rootDiv.innerHTML = router[pathname];\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\nconst rootDiv = document.getElementById("root");\nconst userService = new UserService();\n// userService.getOne(3);\nconst userForCreation = {\n    "id": 10,\n    "name": "Stiliyan Someone",\n    "username": "Zorbak",\n    "email": "PowerZorbak@april.biz",\n    "address": {\n        "street": "Kulas Light",\n        "suite": "Apt. 556",\n        "city": "Gwenborough",\n        "zipcode": "92998-3874",\n        "geo": {\n            "lat": "-37.3159",\n            "lng": "81.1496"\n        }\n    },\n    "phone": "1-770-736-8031 x56442",\n    "website": "hildegard.org",\n    "company": {\n        "name": "Romaguera-Crona",\n        "catchPhrase": "Multi-layered client-server neural-net",\n        "bs": "harness real-time e-markets"\n    }\n};\n// userService.createUser(userForCreation);\nconst postService = new PostService();\n// postService.getOne(2);\nHtmlUtil.render(rootDiv, router);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///361\n')}},__webpack_exports__={};__webpack_modules__[361]()})();